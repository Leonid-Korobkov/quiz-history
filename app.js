'use strict'
import { quiz } from './questions.js'
// –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
const quizStartScreen = document.querySelector('.quiz__screen-start')
const quizSelectQuizList = document.querySelector('.select-quiz__list')

// –ö–≤–∏–∑ –∏ –≤–æ–ø—Ä–æ—Å—ã
const quizQuestionContainer = document.querySelector('.quiz__question-container')
const quizQuestionTitle = document.querySelector('.quiz__title_question')
const quizQuestionImageContainer = document.querySelector('.quiz__image')
const quizQuestionListAnswers = document.querySelector('.quiz__list')
const quizButtonQuestion = document.querySelector('.quiz__button_question')
const quizQuestionButtonWrapper = document.querySelector('.quiz__button-wrapper_question')

// –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
const quizProgressFill = document.querySelector('.quiz__progress-fill')
const quizProgressCurrentNumber = document.querySelector('.quiz__progress-question_current')
const quizProgressAmountNumber = document.querySelector('.quiz__progress-question_amount')

const quizTimeLeft = document.querySelector('.quiz__time-left')

// –≠–∫—Ä–∞–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
const quizResultScreen = document.querySelector('.quiz__result-screen')
const quizButtonRestart = document.querySelector('.quiz__button_restart')
const quizButtonToStartScreen = document.querySelector('.quiz__button_to-start-screen')
const resultScreenTitle = document.querySelector('.result-screen__title')
const resultScreenDescr = document.querySelector('.result-screen__descr')
const resultScreenTable = document.querySelector('.quiz__table-result')
const resultScreenListAnswers = document.querySelector('.quiz__result-question-list')

const audio = document.getElementsByTagName('audio')[0]

function renderQuizItemsOnStartScreen() {
  quiz.forEach(item => {
    const itemHTML = `
    <div class="select-quiz__item">
      <div class="select-quiz__title">${item.nameQuiz}</div>
      <div class="select-quiz__button-wrapper">
        <button type="button" class="quiz__button quiz__button_select-quiz">–ø—Ä–æ–π—Ç–∏</button>
      </div>
    </div>
    `
    quizSelectQuizList.insertAdjacentHTML('beforeend', itemHTML)
  })
}
renderQuizItemsOnStartScreen()

const quizButtonsStart = document.querySelectorAll('.quiz__button_select-quiz')

let arrLoadedImages = []
function generateLoadingImageHTML(numberQuiz, countQuestions) {
  let listHTML = ``
  for (let i = 0; i < countQuestions; i++) {
    listHTML += `<link rel="preload" as="image" href="img/questions/${numberQuiz + 1}/${i + 1}.jpg">`
  }
  arrLoadedImages.push(numberQuiz)
  return listHTML
}

let q
quizButtonsStart.forEach((button, index) => {
  button.addEventListener('click', e => {
    e.preventDefault()
    quizResultScreen.classList.remove('visible')
    quizQuestionContainer.classList.add('visible')
    quizStartScreen.classList.remove('visible')

    q = new InitQuiz(index)
    if (!arrLoadedImages.includes(index)) {
      document.head.insertAdjacentHTML('beforeend', generateLoadingImageHTML(index, quiz[index]['questions'].length))
    }
    q.resetQuizResults()
    q.randomQuestions()
    q.renderQuestion()
    q.animateScrollTo()

    console.log(`Clicked button ${index}`)
  })
})

class InitQuiz {
  constructor(indexCurrentQuiz) {
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
    let questions = quiz[indexCurrentQuiz]['questions']
    let questionIndex = 0
    let userScore = 0
    let countQuestions = questions.length

    // –¢–∞–π–º–µ—Ä
    this.amountTimeSeconds = 30
    this.userPassingTime = 0
    const totalTime = this.amountTimeSeconds * countQuestions
    let countTimeSeconds = this.amountTimeSeconds
    let countdown

    this.timerDisplay = function() {
      quizTimeLeft.innerHTML = `${countTimeSeconds}—Å`
      countdown = setInterval(() => {
        countTimeSeconds--
        quizTimeLeft.innerHTML = `${countTimeSeconds}—Å`
        if (countTimeSeconds == 3) {
          audio.play()
        }
        if (countTimeSeconds == 0) {
          this.userPassingTime += this.amountTimeSeconds - parseInt(quizTimeLeft.textContent)
          questionIndex++
          this.renderQuestion()
        }
      }, 1000)
    }

    this.resetQuizResults = function() {
      questionIndex = 0
      userScore = 0
      this.userPassingTime = 0

      resultScreenTitle.innerHTML = ''
      resultScreenDescr.innerHTML = ''
      resultScreenTable.innerHTML = ''
      resultScreenListAnswers.innerHTML = ''

      for (let question of questions) {
        question['isRightUserAnswer'] = false
        question['userAnswer'] = null
      }
    }

    this.checkAnswer = function() {
      const selectedAnswerUser = quizQuestionListAnswers.querySelector('.quiz__item-answer:checked')
      if (!selectedAnswerUser) {
        quizQuestionButtonWrapper.classList.add('error')
        setTimeout(() => {
          quizQuestionButtonWrapper.classList.remove('error')
        }, 2000)
        return false
      }
      quizQuestionButtonWrapper.classList.remove('error')
      questions[questionIndex]['userAnswer'] = selectedAnswerUser.value
      if (questions[questionIndex]['correct'] === questions[questionIndex]['userAnswer']) {
        questions[questionIndex]['isRightUserAnswer'] = true
        userScore++
      }

      questionIndex++

      return true
    }

    this.renderQuestion = function() {
      // –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤–æ–ø—Ä–æ—Å–µ
      if (questionIndex === questions.length) {
        renderProgressBar(true)
        setTimeout(() => {
          quizQuestionContainer.classList.remove('visible')
          quizResultScreen.classList.add('visible')
          this.renderResult()
        }, 300)
        return
      }

      let questionTitleText = questions[questionIndex]['question']
      let questionImgHTML = `<img src="img/questions/${indexCurrentQuiz + 1}/${questions[questionIndex][
        'numberImg'
      ]}.jpg" alt="${questionTitleText}">`

      let questionListAnswersHTML = ``
      questions[questionIndex]['answers'].forEach((item, i) => {
        questionListAnswersHTML += `
        <li class="quiz__item">
          <input type="radio" name="answer" class="quiz__item-answer" id="quiz__item-answer_${i + 1}" value="${item}">
          <label for="quiz__item-answer_${i + 1}">
            <span>${item}</span>
          </label>
        </li>`
      })

      quizQuestionTitle.textContent = questionTitleText
      quizQuestionImageContainer.innerHTML = questionImgHTML
      quizQuestionListAnswers.innerHTML = questionListAnswersHTML

      if (questionIndex === questions.length - 1) {
        quizButtonQuestion.textContent = '–∑–∞–∫–æ–Ω—á–∏—Ç—å'
      } else {
        quizButtonQuestion.textContent = '–æ—Ç–≤–µ—Ç–∏—Ç—å'
      }

      renderProgressBar()

      countTimeSeconds = this.amountTimeSeconds
      clearInterval(countdown)
      this.timerDisplay()
    }

    function renderProgressBar(isLastQuestion = false) {
      if (!isLastQuestion) {
        quizProgressAmountNumber.textContent = countQuestions
        quizProgressCurrentNumber.textContent = questionIndex + 1
        quizProgressFill.style.width = `${questionIndex / countQuestions * 100}%`
      } else {
        quizProgressFill.style.width = `${questionIndex / countQuestions * 100}%`
      }
    }

    this.randomQuestions = function() {
      questions.sort(() => Math.random() - 0.5)
      for (const q of questions) {
        q.answers.sort(() => Math.random() - 0.5)
      }
    }

    this.renderResult = function() {
      clearInterval(countdown)
      audio.pause()
      audio.currentTime = 0

      const percentRightAnswers = (userScore / countQuestions * 100).toFixed()

      let raiting = 0
      if (percentRightAnswers > 85) {
        resultScreenDescr.innerHTML = `<span>–ì–µ–Ω–∏–π!</span>–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞—Ç–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏, —Ç—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞–≥–Ω–∞—Ç! –¢–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –°–æ–≤–µ—Ç—Å–∫–æ–º –°–æ—é–∑–µ –≤ 1945-1953 –≥–æ–¥–∞—Ö –ø—Ä–æ—Å—Ç–æ –ª–æ–º–∞—é—Ç —à–∞–±–ª–æ–Ω—ã. –¢—ã –∑–Ω–∞–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º —Å–∞–º –ò–æ—Å–∏—Ñ –°—Ç–∞–ª–∏–Ω! –ë—Ä–∞–≤–æ!`
        resultScreenTitle.innerHTML = `üéâ${userScore} <span>–∏–∑</span> ${countQuestions}üéâ`
        raiting = 5
      } else if (percentRightAnswers > 65) {
        resultScreenDescr.innerHTML = `<span>–û—Ç–ª–∏—á–Ω–æ!</span>–¢—ã –Ω–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–æ—Ä–æ–∫–∞, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞—è —Å–æ–±—Ä–∞—Ç—å –∫—Ä—É–ø–∏—Ü—ã –∑–Ω–∞–Ω–∏–π. –¢–≤–æ–∏ –ø–æ–∑–Ω–∞–Ω–∏—è –æ –°–æ–≤–µ—Ç—Å–∫–æ–º –°–æ—é–∑–µ –≤ 1945-1953 –≥–æ–¥–∞—Ö –¥–æ—Å—Ç–æ–π–Ω—ã –æ—Ç–º–µ—Ç–∫–∏ "—Ö–æ—Ä–æ—à–æ". –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ —Å–∫–æ—Ä–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –ª–µ–≥–µ–Ω–¥–æ–π –Ω–∞—É—á–Ω—ã—Ö —Ç—É—Å–æ–≤–æ–∫!`
        resultScreenTitle.innerHTML = `üéä${userScore} <span>–∏–∑</span> ${countQuestions}üéä`
        raiting = 4
      } else if (percentRightAnswers > 45) {
        resultScreenDescr.innerHTML = `<span>–ù–µ –ø–ª–æ—Ö–æ, –Ω–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–Ω–æ!</span>–¢—ã –æ–∫–∞–∑–∞–ª—Å—è –ª—É—á—à–µ, —á–µ–º –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ. –¢–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –°–æ–≤–µ—Ç—Å–∫–æ–º –°–æ—é–∑–µ –≤ 1945-1953 –≥–æ–¥–∞—Ö –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–æ —É —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —à–∞–Ω—Å –ø–æ–¥—Ç—è–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–≤–Ω—é –Ω–∞—Å—Ç–æ—è—â–∏—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –≥—É—Ä—É. –í–ø–µ—Ä–µ–¥, –≤ –±–æ–π –∑–∞ –∑–Ω–∞–Ω–∏—è!`
        resultScreenTitle.innerHTML = `ü•≥${userScore} <span>–∏–∑</span> ${countQuestions}ü•≥`
        raiting = 3
      } else if (percentRightAnswers > 1) {
        resultScreenDescr.innerHTML = `<span>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ!</span>–¢—ã –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è, –∫–∞–∫ –ö–ü–°–° –≤ 1991 –≥–æ–¥—É. –¢–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –°–æ–≤–µ—Ç—Å–∫–æ–º –°–æ—é–∑–µ –≤ 1945-1953 –≥–æ–¥–∞—Ö –æ—Å—Ç–∞–≤–ª—è—é—Ç –∂–µ–ª–∞—Ç—å –ª—É—á—à–µ–≥–æ. –ù–æ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è! –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª–Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–µ–π, —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞–Ω–µ—à—å –Ω–∞—Å—Ç–æ—è—â–∏–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –∫—É–º–∏—Ä–æ–º!`
        resultScreenTitle.innerHTML = `üò≠${userScore} <span>–∏–∑</span> ${countQuestions}üò≠`
        raiting = 2
      } else {
        resultScreenDescr.innerHTML = `<span>–û–π-–æ–π-–æ–π</span>–°—É–¥—è –ø–æ –≤—Å–µ–º—É, —Ç—ã —Å–æ–≤—Å–µ–º –∑–∞–±–ª—É–¥–∏–ª—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—É—Ç—è—Ö –°–æ–≤–µ—Ç—Å–∫–æ–≥–æ –°–æ—é–∑–∞! –ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –∏—Å—Ç–æ—Ä–∏—è –∏–Ω–æ–≥–¥–∞ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ–≤–æ–ª—å–Ω–æ –∫–æ–≤–∞—Ä–Ω–æ–π. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —ç—Ç–∏–º –ø–µ—Ä–∏–æ–¥–æ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –≥—É—Ä—É! –í—Å–µ–≥–¥–∞ –µ—Å—Ç—å –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–µ, –¥–µ—Ä–∂–∏—Å—å –∏ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!`
        resultScreenTitle.innerHTML = `ü§¨ü§Ø${userScore} <span>–∏–∑</span> ${countQuestions}ü§Øü§¨`
        raiting = 1
      }

      function secondsToMinutes(seconds) {
        seconds = Number(seconds)

        let m = Math.floor(seconds % 3600 / 60)
        let s = Math.floor(seconds % 3600 % 60)

        return ('0' + m).slice(-2) + ':' + ('0' + s).slice(-2)
      }

      resultScreenTable.innerHTML = `
    <tr>
      <th>–ö–æ–ª–∏—á–µ—Å—Ç–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</th>
      <th>${userScore} –∏–∑ ${countQuestions}</th>
    </tr>
    <tr>
      <td>–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</td>
      <td>${percentRightAnswers}%</td>
    </tr>
    <tr>
      <td>–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</td>
      <td>${secondsToMinutes(this.userPassingTime)} –∏–∑ ${secondsToMinutes(totalTime)}</td>
    </tr>
    <tr>
      <td>–û—Ü–µ–Ω–∫–∞</td>
      <td>${raiting}</td>
    </tr>
  `

      resultScreenListAnswers.innerHTML = `<div class="result-question-list__title">–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã</div>`
      questions.forEach((question, index) => {
        let questionListAnswersHTML = ''

        let templateAnswerItem = `
        <li class="quiz__item %cssClass%">
          <label>
            <span>%title%</span>
          </label>
          %description%
        </li>
      `
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞–º –Ω—É–∂–Ω—ã–µ —Å—Ç–∏–ª–∏
        if (question['isRightUserAnswer']) {
          for (let answer of question['answers']) {
            if (answer !== question['correct']) {
              questionListAnswersHTML += templateAnswerItem
                .replace('%cssClass%', 'quiz__item_answered')
                .replace('%title%', answer)
                .replace('%description%', '')
            } else {
              questionListAnswersHTML += templateAnswerItem
                .replace('%cssClass%', 'quiz__item_right')
                .replace('%title%', answer)
                .replace('%description%', `<div class="result-question-list__answer-descr">${question['descrAnswer']}</div>`)
            }
          }
        } else {
          for (let answer of question['answers']) {
            if (answer === question['correct']) {
              questionListAnswersHTML += templateAnswerItem
                .replace('%cssClass%', 'quiz__item_suppose')
                .replace('%title%', answer)
                .replace('%description%', `<div class="result-question-list__answer-descr">${question['descrAnswer']}</div>`)
            } else if (answer === question['userAnswer']) {
              questionListAnswersHTML += templateAnswerItem
                .replace('%cssClass%', 'quiz__item_wrong')
                .replace('%title%', answer)
                .replace('%description%', '')
            } else {
              questionListAnswersHTML += templateAnswerItem
                .replace('%cssClass%', 'quiz__item_answered')
                .replace('%title%', answer)
                .replace('%description%', '')
            }
          }
        }

        const questionHTML = `
    <div class="result-question-list__item">
      <div class="quiz__question-wrapper">
        <h4 class="quiz__title quiz__title_question main-title">${index + 1}) ${question['question']}</h4>
        <div class="quiz__question">
          <div class="quiz__image">
            <img src="img/questions/${indexCurrentQuiz + 1}/${question['numberImg']}.jpg" alt="${question['question']}">
          </div>
          <ul class="quiz__list">${questionListAnswersHTML}</ul>
        </div>
      </div>
    </div>
    `
        resultScreenListAnswers.insertAdjacentHTML('beforeend', questionHTML)
      })
    }

    function getHeaderHeightAndMargin() {
      return document.querySelector('.header').scrollHeight + parseInt(window.getComputedStyle(document.querySelector('.quiz')).marginTop)
    }

    this.animateScrollTo = function() {
      window.scrollTo({
        top: getHeaderHeightAndMargin(),
        left: 0,
        behavior: 'smooth'
      })
    }
  }
}

// C–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã, —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –ø–æ–≤—Ç–æ—Ä –∏–≥—Ä—ã)
quizButtonQuestion.addEventListener('click', function(e) {
  e.preventDefault()
  if (q.checkAnswer()) {
    q.userPassingTime += q.amountTimeSeconds - parseInt(quizTimeLeft.textContent)
    q.renderQuestion()

    // –í—ã–∫–ª—é—á–µ–Ω–∏—é –∑–≤—É–∫–∞
    audio.pause()
    audio.currentTime = 0
    q.animateScrollTo()
  }
})
quizButtonRestart.addEventListener('click', function(e) {
  e.preventDefault()
  q.resetQuizResults()
  q.randomQuestions()
  q.renderQuestion()
  quizResultScreen.classList.remove('visible')
  quizQuestionContainer.classList.add('visible')
  quizStartScreen.classList.remove('visible')
  q.animateScrollTo()
})
quizButtonToStartScreen.addEventListener('click', function(e) {
  e.preventDefault()
  q.resetQuizResults()
  quizResultScreen.classList.remove('visible')
  quizQuestionContainer.classList.remove('visible')
  quizStartScreen.classList.add('visible')
  q.animateScrollTo()
})
